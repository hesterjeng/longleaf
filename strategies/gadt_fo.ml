open Gadt
module I = Tacaml.Indicator.Raw

let var () = Var (Uuidm.v4_gen Util.random_state ())
let tacaml x = Indicator x

module Variable = struct
  (* Single argument indicators *)
  let dema = tacaml (App1 (Fun I.dema, var ()))
  let ema = tacaml (App1 (Fun I.ema, var ()))
  let kama = tacaml (App1 (Fun I.kama, var ()))
  let ma = tacaml (App1 (Fun I.ma, var ()))
  let midpoint = tacaml (App1 (Fun I.midpoint, var ()))
  let midprice = tacaml (App1 (Fun I.midprice, var ()))
  let sma = tacaml (App1 (Fun I.sma, var ()))
  let tema = tacaml (App1 (Fun I.tema, var ()))
  let trima = tacaml (App1 (Fun I.trima, var ()))
  let wma = tacaml (App1 (Fun I.wma, var ()))
  let adx = tacaml (App1 (Fun I.adx, var ()))
  let adxr = tacaml (App1 (Fun I.adxr, var ()))
  let aroon_osc = tacaml (App1 (Fun I.aroon_osc, var ()))
  let cci = tacaml (App1 (Fun I.cci, var ()))
  let cmo = tacaml (App1 (Fun I.cmo, var ()))
  let dx = tacaml (App1 (Fun I.dx, var ()))
  let mfi = tacaml (App1 (Fun I.mfi, var ()))
  let minus_di = tacaml (App1 (Fun I.minus_di, var ()))
  let minus_dm = tacaml (App1 (Fun I.minus_dm, var ()))
  let mom = tacaml (App1 (Fun I.mom, var ()))
  let plus_di = tacaml (App1 (Fun I.plus_di, var ()))
  let plus_dm = tacaml (App1 (Fun I.plus_dm, var ()))
  let roc = tacaml (App1 (Fun I.roc, var ()))
  let rocp = tacaml (App1 (Fun I.rocp, var ()))
  let rocr = tacaml (App1 (Fun I.rocr, var ()))
  let rocr100 = tacaml (App1 (Fun I.rocr100, var ()))
  let rsi = tacaml (App1 (Fun I.rsi, var ()))
  let trix = tacaml (App1 (Fun I.trix, var ()))
  let willr = tacaml (App1 (Fun I.willr, var ()))
  let atr = tacaml (App1 (Fun I.atr, var ()))
  let natr = tacaml (App1 (Fun I.natr, var ()))
  let aroon_down = tacaml (App1 (Fun I.aroon_down, var ()))
  let aroon_up = tacaml (App1 (Fun I.aroon_up, var ()))
  let beta = tacaml (App1 (Fun I.beta, var ()))
  let correl = tacaml (App1 (Fun I.correl, var ()))
  let linearreg = tacaml (App1 (Fun I.linearreg, var ()))
  let linearreg_angle = tacaml (App1 (Fun I.linearreg_angle, var ()))
  let linearreg_intercept = tacaml (App1 (Fun I.linearreg_intercept, var ()))
  let linearreg_slope = tacaml (App1 (Fun I.linearreg_slope, var ()))
  let min_max_min = tacaml (App1 (Fun I.min_max_min, var ()))
  let min_max_max = tacaml (App1 (Fun I.min_max_max, var ()))
  let tsf = tacaml (App1 (Fun I.tsf, var ()))
  let max = tacaml (App1 (Fun I.max, var ()))
  let min = tacaml (App1 (Fun I.min, var ()))
  let sum = tacaml (App1 (Fun I.sum, var ()))
  let avgdev = tacaml (App1 (Fun I.avgdev, var ()))
  let imi = tacaml (App1 (Fun I.imi, var ()))
  let accbands_upper = tacaml (App1 (Fun I.accbands_upper, var ()))
  let accbands_middle = tacaml (App1 (Fun I.accbands_middle, var ()))
  let accbands_lower = tacaml (App1 (Fun I.accbands_lower, var ()))

  (* Two argument indicators *)
  let mama = tacaml (App2 (Fun I.mama, var (), var ()))
  let mavp = tacaml (App2 (Fun I.mavp, var (), var ()))
  let sar = tacaml (App2 (Fun I.sar, var (), var ()))
  let t3 = tacaml (App2 (Fun I.t3, var (), var ()))
  let apo = tacaml (App2 (Fun I.apo, var (), var ()))
  let ppo = tacaml (App2 (Fun I.ppo, var (), var ()))
  let adosc = tacaml (App2 (Fun I.adosc, var (), var ()))
  let stddev = tacaml (App2 (Fun I.stddev, var (), var ()))
  let var_indicator = tacaml (App2 (Fun I.var, var (), var ()))
  let mama_mama = tacaml (App2 (Fun I.mama_mama, var (), var ()))
  let mama_fama = tacaml (App2 (Fun I.mama_fama, var (), var ()))
  let stoch_f_fast_k = tacaml (App2 (Fun I.stoch_f_fast_k, var (), var ()))
  let stoch_f_fast_d = tacaml (App2 (Fun I.stoch_f_fast_d, var (), var ()))

  (* Three argument indicators *)
  let upper_bband = tacaml (App3 (Fun I.upper_bband, var (), var (), var ()))
  let middle_bband = tacaml (App3 (Fun I.middle_bband, var (), var (), var ()))
  let lower_bband = tacaml (App3 (Fun I.lower_bband, var (), var (), var ()))
  let macd_macd = tacaml (App3 (Fun I.macd_macd, var (), var (), var ()))
  let macd_signal = tacaml (App3 (Fun I.macd_signal, var (), var (), var ()))
  let macd_hist = tacaml (App3 (Fun I.macd_hist, var (), var (), var ()))

  let macd_ext_macd =
    tacaml (App3 (Fun I.macd_ext_macd, var (), var (), var ()))

  let macd_ext_signal =
    tacaml (App3 (Fun I.macd_ext_signal, var (), var (), var ()))

  let macd_ext_hist =
    tacaml (App3 (Fun I.macd_ext_hist, var (), var (), var ()))

  let ultosc = tacaml (App3 (Fun I.ultosc, var (), var (), var ()))
  let stoch_slow_k = tacaml (App3 (Fun I.stoch_slow_k, var (), var (), var ()))
  let stoch_slow_d = tacaml (App3 (Fun I.stoch_slow_d, var (), var (), var ()))

  let stoch_rsi_fast_k =
    tacaml (App3 (Fun I.stoch_rsi_fast_k, var (), var (), var ()))

  let stoch_rsi_fast_d =
    tacaml (App3 (Fun I.stoch_rsi_fast_d, var (), var (), var ()))

  (* Zero argument indicators *)
  let ht_trendline = tacaml (Const I.ht_trendline)
  let ad = tacaml (Const I.ad)
  let obv = tacaml (Const I.obv)
  let trange = tacaml (Const I.trange)
  let avg_price = tacaml (Const I.avg_price)
  let med_price = tacaml (Const I.med_price)
  let typ_price = tacaml (Const I.typ_price)
  let wcl_price = tacaml (Const I.wcl_price)
  let ht_dc_period = tacaml (Const I.ht_dc_period)
  let ht_dc_phase = tacaml (Const I.ht_dc_phase)
  let ht_phasor_inphase = tacaml (Const I.ht_phasor_inphase)
  let ht_phasor_quadrature = tacaml (Const I.ht_phasor_quadrature)
  let ht_sine_sine = tacaml (Const I.ht_sine_sine)
  let ht_sine_leadsine = tacaml (Const I.ht_sine_leadsine)
  let acos = tacaml (Const I.acos)
  let asin = tacaml (Const I.asin)
  let atan = tacaml (Const I.atan)
  let ceil = tacaml (Const I.ceil)
  let cos = tacaml (Const I.cos)
  let cosh = tacaml (Const I.cosh)
  let exp = tacaml (Const I.exp)
  let floor = tacaml (Const I.floor)
  let ln = tacaml (Const I.ln)
  let log10 = tacaml (Const I.log10)
  let sin = tacaml (Const I.sin)
  let sinh = tacaml (Const I.sinh)
  let sqrt = tacaml (Const I.sqrt)
  let tan = tacaml (Const I.tan)
  let tanh = tacaml (Const I.tanh)
  let add = tacaml (Const I.add)
  let div = tacaml (Const I.div)
  let mult = tacaml (Const I.mult)
  let sub = tacaml (Const I.sub)
  let bop = tacaml (Const I.bop)

  (* Candlestick patterns (most are zero args, some have one arg) *)
  let ht_trend_mode = tacaml (Const I.ht_trend_mode)
  let cdl_2crows = tacaml (Const I.cdl_2crows)
  let cdl_3blackcrows = tacaml (Const I.cdl_3blackcrows)
  let cdl_3inside = tacaml (Const I.cdl_3inside)
  let cdl_3linestrike = tacaml (Const I.cdl_3linestrike)
  let cdl_3outside = tacaml (Const I.cdl_3outside)
  let cdl_3starsinsouth = tacaml (Const I.cdl_3starsinsouth)
  let cdl_3whitesoldiers = tacaml (Const I.cdl_3whitesoldiers)
  let cdl_abandonedbaby = tacaml (App1 (Fun I.cdl_abandonedbaby, var ()))
  let cdl_advanceblock = tacaml (Const I.cdl_advanceblock)
  let cdl_belthold = tacaml (Const I.cdl_belthold)
  let cdl_breakaway = tacaml (Const I.cdl_breakaway)
  let cdl_closingmarubozu = tacaml (Const I.cdl_closingmarubozu)
  let cdl_concealbabyswall = tacaml (Const I.cdl_concealbabyswall)
  let cdl_counterattack = tacaml (Const I.cdl_counterattack)
  let cdl_darkcloudcover = tacaml (App1 (Fun I.cdl_darkcloudcover, var ()))
  let cdl_doji = tacaml (Const I.cdl_doji)
  let cdl_dojistar = tacaml (Const I.cdl_dojistar)
  let cdl_dragonflydoji = tacaml (Const I.cdl_dragonflydoji)
  let cdl_engulfing = tacaml (Const I.cdl_engulfing)
  let cdl_eveningdojistar = tacaml (App1 (Fun I.cdl_eveningdojistar, var ()))
  let cdl_eveningstar = tacaml (App1 (Fun I.cdl_eveningstar, var ()))
  let cdl_gap_side_side_white = tacaml (Const I.cdl_gap_side_side_white)
  let cdl_gravestonedoji = tacaml (Const I.cdl_gravestonedoji)
  let cdl_hammer = tacaml (Const I.cdl_hammer)
  let cdl_hangingman = tacaml (Const I.cdl_hangingman)
  let cdl_harami = tacaml (Const I.cdl_harami)
  let cdl_haramicross = tacaml (Const I.cdl_haramicross)
  let cdl_highwave = tacaml (Const I.cdl_highwave)
  let cdl_hikkake = tacaml (Const I.cdl_hikkake)
  let cdl_hikkakemod = tacaml (Const I.cdl_hikkakemod)
  let cdl_homingpigeon = tacaml (Const I.cdl_homingpigeon)
  let cdl_identical3crows = tacaml (Const I.cdl_identical3crows)
  let cdl_inneck = tacaml (Const I.cdl_inneck)
  let cdl_invertedhammer = tacaml (Const I.cdl_invertedhammer)
  let cdl_kicking = tacaml (Const I.cdl_kicking)
  let cdl_kickingbylength = tacaml (Const I.cdl_kickingbylength)
  let cdl_ladderbottom = tacaml (Const I.cdl_ladderbottom)
  let cdl_longleggedDoji = tacaml (Const I.cdl_longleggedDoji)
  let cdl_longline = tacaml (Const I.cdl_longline)
  let cdl_marubozu = tacaml (Const I.cdl_marubozu)
  let cdl_matchinglow = tacaml (Const I.cdl_matchinglow)
  let cdl_mathold = tacaml (App1 (Fun I.cdl_mathold, var ()))
  let cdl_morningdojistar = tacaml (App1 (Fun I.cdl_morningdojistar, var ()))
  let cdl_morningstar = tacaml (App1 (Fun I.cdl_morningstar, var ()))
  let cdl_onneck = tacaml (Const I.cdl_onneck)
  let cdl_piercing = tacaml (Const I.cdl_piercing)
  let cdl_rickshawman = tacaml (Const I.cdl_rickshawman)
  let cdl_risefall3methods = tacaml (Const I.cdl_risefall3methods)
  let cdl_separatinglines = tacaml (Const I.cdl_separatinglines)
  let cdl_shootingstar = tacaml (Const I.cdl_shootingstar)
  let cdl_shortline = tacaml (Const I.cdl_shortline)
  let cdl_spinningtop = tacaml (Const I.cdl_spinningtop)
  let cdl_stalledpattern = tacaml (Const I.cdl_stalledpattern)
  let cdl_sticksandwich = tacaml (Const I.cdl_sticksandwich)
  let cdl_takuri = tacaml (Const I.cdl_takuri)
  let cdl_tasukigap = tacaml (Const I.cdl_tasukigap)
  let cdl_thrusting = tacaml (Const I.cdl_thrusting)
  let cdl_tristar = tacaml (Const I.cdl_tristar)
  let cdl_unique3river = tacaml (Const I.cdl_unique3river)
  let cdl_upsidegap2crows = tacaml (Const I.cdl_upsidegap2crows)
  let cdl_xsidegap3methods = tacaml (Const I.cdl_xsidegap3methods)
  let max_index = tacaml (App1 (Fun I.max_index, var ()))
  let min_index = tacaml (App1 (Fun I.min_index, var ()))
  let min_max_index_min = tacaml (App1 (Fun I.min_max_index_min, var ()))
  let min_max_index_max = tacaml (App1 (Fun I.min_max_index_max, var ()))
end

module Functions = struct end
