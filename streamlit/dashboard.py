import streamlit as st
import requests
import plotly.graph_objects as go
import hashlib
import os
import json

# Authentication
def check_password():
    def password_entered():
        hashed = hashlib.sha256(st.session_state["password"].encode()).hexdigest()
        # Compare with hashed password from environment variable
        # Generate hash with: python3 -c "import hashlib; print(hashlib.sha256('your_password'.encode()).hexdigest())"
        expected_hash = os.getenv("DASHBOARD_PASSWORD_HASH")
        if expected_hash and hashed == expected_hash:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        st.text_input("Password", type="password", on_change=password_entered, key="password")
        st.info("Set DASHBOARD_PASSWORD_HASH environment variable with your hashed password")
        return False
    elif not st.session_state["password_correct"]:
        st.text_input("Password", type="password", on_change=password_entered, key="password")
        st.error("Password incorrect")
        return False
    else:
        return True

if not check_password():
    st.stop()

# Main app
st.title("Longleaf Trading Dashboard")

# Sidebar controls
st.sidebar.header("Controls")
symbol = st.sidebar.text_input("Symbol", value="AAPL", help="Enter stock symbol (e.g., AAPL, TSLA)")
server_url = st.sidebar.text_input("Server URL", value="http://localhost:8080", help="OCaml server URL")

if st.sidebar.button("Fetch Data") or symbol:
    if symbol:
        try:
            with st.spinner(f"Fetching data for {symbol}..."):
                response = requests.get(f"{server_url}/data/{symbol.upper()}")
                response.raise_for_status()
                
                # Parse JSON response containing plotly layout and traces
                plot_data = response.json()
                
                # Create plotly figure from server response
                if "layout" in plot_data and "data" in plot_data:
                    fig = go.Figure(data=plot_data["data"], layout=plot_data["layout"])
                    
                    # Display the graph
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Show raw data in expander
                    with st.expander("Raw Data"):
                        st.json(plot_data)
                        
                elif "traces" in plot_data:
                    # Alternative format: traces array
                    fig = go.Figure()
                    for trace in plot_data["traces"]:
                        fig.add_trace(go.Scatter(**trace))
                    
                    if "layout" in plot_data:
                        fig.update_layout(plot_data["layout"])
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    with st.expander("Raw Data"):
                        st.json(plot_data)
                else:
                    st.error("Invalid data format. Expected 'layout' and 'data' or 'traces' fields.")
                    st.json(plot_data)
                    
        except requests.exceptions.RequestException as e:
            st.error(f"Error connecting to server: {e}")
        except json.JSONDecodeError as e:
            st.error(f"Error parsing JSON response: {e}")
        except Exception as e:
            st.error(f"Unexpected error: {e}")
    else:
        st.warning("Please enter a symbol")

# Status section
st.sidebar.markdown("---")
st.sidebar.subheader("Server Status")

try:
    health_response = requests.get(f"{server_url}/health", timeout=2)
    if health_response.status_code == 200:
        st.sidebar.success("Server Online")
    else:
        st.sidebar.error(f"Server Error: {health_response.status_code}")
except:
    st.sidebar.error("Server Offline")

# Instructions
st.sidebar.markdown("---")
st.sidebar.subheader("Instructions")
st.sidebar.markdown("""
1. Enter a stock symbol (e.g., AAPL, TSLA)
2. Click 'Fetch Data' or press Enter
3. View the plotly graph generated by your OCaml server

**Server Endpoint**: `GET /data/{symbol}`
""")